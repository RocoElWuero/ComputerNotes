#!/usr/bin/env bash

clear

#Variables
path=""
# Establecer colores de texto
RED="\e[31m"
GREEN="\e[32m"
YELLOW="\e[33m"
BLUE="\e[34m"
MAGENTA="\e[35m"
CYAN="\e[36m"
WHITE="\e[37m"
# Establecer estilo de texto
BOLD="\e[1m"
UNDERLINE="\e[4m"
INVERT="\e[7m"
# Restablecer todos los estilos y colores
RESET="\e[0m"

# Función para mostrar opción inválida
print_invalid_option() {
	echo -e "${RED}Opción inválida. Por favor, ingrese una opción válida.${GREEN}"
}
# Función para guardar lista de hosts en un archivo
save_hosts_list() {
	network="${1}"
	path="${network/\//-}/"
	datetime_suffix="$(date +'%Y%m%d_%H%M%S')"
	mkdir -p "${path}"
	echo -e "${GREEN}Running Nmap scan on ${WHITE}\"${network}\"${RED}...${GREEN}"
	echo -e "${GREEN}======================================"
	echo nmap -sn "${network}" -oG "${path}hosts_list-${datetime_suffix}.log"
	echo -e "${GREEN}======================================"
}
# Función para escanear una red completa
scan_whole_network() {
	while true; do
		echo -e "${GREEN}Ingrese la red a escanear (ej. 192.168.1.0/24)"
		if [[ "$(ls -d */ 2>/dev/null | grep '-' | tr '/' ' ' | tr '\n' ' ')" != "" ]]; then
			ls -d */ 2>/dev/null | grep '-' | tr '/' ' ' | tr '\n' ' '
			echo -en "\betc.\n> "
		else
			echo -n "> "
		fi
		read -r network
		if [[ ${network} =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}\/[0-9]{1,2}$ ]]; then break
		else echo -e "${RED}Formato incorrecto. Por favor, ingrese una dirección de red válida.${GREEN}"; fi
	done
	save_hosts_list "${network}"
	echo -e "${GREEN}Lista de hosts guardada en ${WHITE}\"${network/\//-}/hosts_list.log\"${RED}...${GREEN}"
}
# Función para realizar el escaneo Nmap
run_nmap_scan() {
	options="${1}"
	target="${2}"
	output_file="${3}"
	echo -e "${GREEN}Running Nmap scan on ${WHITE}\"${target}\"${RED}...${GREEN}"
	echo -e "${GREEN}======================================"
	echo nmap "${options}" "${target}" -oN "${output_file}"
	echo -e "${GREEN}======================================"
}
# Función para seleccionar el tipo de escaneo Nmap
select_scan_type() {
	network="${1}"
	path=""
	while true; do #To get the host
		echo -en "${GREEN}Ingrese el host a escanear: "; read -r target
		if [[ ${target} =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}$ ]]; then
			if [[ ${network} =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}\/[0-9]{1,2}$ ]]; then
				path="${network/\//-}/"
				mkdir -p "${path}"
			else
				path="${target}/"
				mkdir -p "${path}"
			fi
			break
		else
			echo -e "${RED}Formato incorrecto. Por favor, ingrese una dirección de host válida.${GREEN}"
		fi
	done
	while true; do #To chose the option
		echo -en "${GREEN}A) Identificar el sistema operativo (-O)\nB) Enumerar servicios (-sV)\nC) Escaneo TCP SYN (Stealth/Sigiloso) (-sS)\nD) Escaneo TCP Connect (Less stealthy/Menos sigiloso) (-sT)\nE) Escaneo UDP en puertos comunes (-sU)\nF) Ping Sweep (TCP ACK/Complemento de ICMP) (-PA)\nG) Ping tradicional (ICMP) (-sn)\nH) Escaneo Agresivo (-A)\nI) Escaneo personalizado\nInput> "; read -r option
		option="$(echo "${option}" | tr '[:lower:]' '[:upper:]')"
		if [[ ${option} =~ ^(A|B|C|D|E|F|G|H)$ ]]; then break
		else print_invalid_option; fi
	done
	datetime_suffix="$(date +'%Y%m%d_%H%M%S')"
	case ${option} in
		A) #Identificar el sistema operativo (-O)
			echo -e "${GREEN}Iniciando escaneo para identificar el sistema operativo en ${WHITE}\"${target}\"${RED}...${GREEN}"
			run_nmap_scan "-O" "${target}" "${path}os_detection-${target}-${datetime_suffix}.log"
			;;
		B) #Enumerar servicios (-sV)
			echo -e "${GREEN}Iniciando escaneo para enumerar servicios en ${WHITE}\"${target}\"${RED}...${GREEN}"
			run_nmap_scan "-sV" "${target}" "${path}service_enumeration-${target}-${datetime_suffix}.log"
			;;
		C) #Escaneo TCP SYN (Stealth/Sigiloso) (-sS)
			echo -e "${GREEN}Iniciando escaneo de TCP SYN (Stealth/Sigiloso) en ${WHITE}\"${target}\"${RED}...${GREEN}"
			run_nmap_scan "-sS" "${target}" "${path}tcp_syn_scan-${target}-${datetime_suffix}.log"
			;;
		D) #Escaneo TCP Connect (Less stealthy/Menos sigiloso) (-sT)
			echo -e "${GREEN}Iniciando escaneo de TCP Connect (Less stealthy/Menos sigiloso) en ${WHITE}\"${target}\"${RED}...${GREEN}"
			run_nmap_scan "-sT" "${target}" "${path}tcp_connect_scan-${target}-${datetime_suffix}.log"
			;;
		E) #Escaneo UDP en puertos comunes (-sU)
			echo -e "${GREEN}Iniciando escaneo de UDP en ${WHITE}\"${target}\"${RED}...${GREEN}"
			run_nmap_scan "-sU --top-ports 100" "${target}" "${path}udp_scan-${target}-${datetime_suffix}.log"
			;;
		F) #Ping Sweep (TCP ACK/Complemento de ICMP) (-PA)
			echo -e "${GREEN}Iniciando escaneo de Ping Sweep (TCP ACK/Complemento de ICMP) en ${WHITE}\"${target}\"${RED}...${GREEN}"
			run_nmap_scan "-PA" "${target}" "${path}ping_sweep-${target}-${datetime_suffix}.log"
			;;
		G) #Ping tradicional (ICMP) (-sn)
			echo -e "${GREEN}Iniciando escaneo de Ping tradicional (ICMP) en ${WHITE}\"${target}\"${RED}...${GREEN}"
			run_nmap_scan "-sn" "${target}" "${path}icmp_ping-${target}-${datetime_suffix}.log"
			;;
		H) #Escaneo Agresivo
			echo -e "${GREEN}Iniciando escaneo Agresivo en ${WHITE}\"${target}\"${RED}...${GREEN}"
			run_nmap_scan "-A" "${target}" "${path}aggressive_scan-${target}-${datetime_suffix}.log"
			;;
		I) #Escaneo personalizado <======================================================== QUINTO PUNTO
			#echo -en "${GREEN}Ingrese los tipos de escaneo deseados separados por comas (por ejemplo, A,B,C): "; read -r scan_types
			echo -en "${GREEN}Ingrese las opciones personalizadas de Nmap (por ejemplo, -p 1-100, -sX, etc.): "; read -r custom_options
			run_nmap_scan "${custom_options}" "${target}" "${path}custom_scan-${target}-${datetime_suffix}.log"
			;;
	esac
}
# Función para comprimir los registros y luego borrarlos
# <=============================================================================
clear_temporary_logs() { #Lo ideal es que preguntara que IP desea guardar
	#Para hacer lo mismo con el de Arp-scan
	#OCTAVO PUNTO
	mkdir -p .bkp/
	for directory in */; do
		zip -r ".bkp/${directory%/}.zip" "${directory}"
		echo -e "${GREEN}Directorio ${WHITE}\"${directory%/}\"${RED} comprimido."
	done
	for directory in */; do
		# Shred de los archivos .log en el directorio
		find "${directory}" -name '*.log' -exec shred -zvuf {} \;
		# Renombrar la carpeta
		mv "${directory}" "000000000000000000"
		# Borrar la carpeta renombrada
		rm -rf "000000000000000000"
		echo -e "${GREEN}Directorio ${WHITE}\"${directory%/}\"${RED} procesado."
	done
}
# Función principal
main() {
	while true; do
		# Select between scanning an entire network or a specific host
		while true; do
			echo -en "${GREEN}¿Deseas escanear una red completa? (Y/n): "; read -r option # scan_whole_network
			option="$(echo "${option}" | tr '[:lower:]' '[:upper:]')"
			if [[ ${option} =~ ^(Y|N)$ ]]; then break
			else print_invalid_option; fi
		done
		if [ "${option}" = "Y" ]; then #A network
			scan_whole_network
		else #A host
			while true; do #To know if is a network
				echo -en "${GREEN}¿El host es parte de una red? (Y/n): "; read -r option
				option="$(echo "${option}" | tr '[:lower:]' '[:upper:]')"
				if [[ ${option} =~ ^(Y|N)$ ]]; then break
				else print_invalid_option; fi
			done
			if [ "${option}" = "Y" ]; then
				while true; do #To get the network
					echo "¿Cúal es esa red? (ej. 192.168.1.0/24)"
					if [[ "$(ls -d */ 2>/dev/null | grep '-' | tr '/' ' ' | tr '\n' ' ')" != "" ]]; then
						ls -d */ 2>/dev/null | grep '-' | tr '/' ' ' | tr '\n' ' '
						echo -en "\betc.\n> "
					else
						echo -n "> "
					fi
					read -r network
					if [[ ${network} =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}\/[0-9]{1,2}$ ]]; then break
					else echo -e "${RED}Formato incorrecto. Por favor, ingrese una dirección de red válida.${GREEN}"; fi
				done
				select_scan_type "${network}"
			else
				select_scan_type
			fi
		fi
		while true; do #To continue
			echo -en "${GREEN}¿Quieres continuar? (Y/n): "; read -r option
			option="$(echo "${option}" | tr '[:lower:]' '[:upper:]')"
			if [[ ${option} =~ ^(Y|N)$ ]]; then break
			else print_invalid_option; fi
		done
		if [ "${option}" = "Y" ]; then echo ""
		elif [ "${option}" = "N" ]; then break
		fi
	done
	echo -e "${GREEN}===== ${WHITE}Escaneos completados ${RED}====="
	while true; do
		echo -en "${GREEN}¿Quieres limpiar y respaldar los registros? (Y/n): "; read -r option
		option="$(echo "${option}" | tr '[:lower:]' '[:upper:]')"
		if [ "${option}" = "Y" ]; then
			clear_temporary_logs
			break
		elif [ "${option}" = "N" ]; then
			break
		else
			print_invalid_option
		fi
	done
}

echo -e "${GREEN}===== ${WHITE}Reconocimiento - Nmap Script ${RED}====="
# Ejecutar el script
main
echo -e "${RESET}"
