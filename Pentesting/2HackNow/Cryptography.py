#!/usr/bin/env python
import sys
import os
import argparse
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP
from Crypto.Cipher import AES

class CustomHelpFormatter(argparse.HelpFormatter):
	def format_help(self):
		help_text = super().format_help()
		# Remove the first line that contains the usage message
		help_text_lines = help_text.splitlines()
		return '\n'.join(help_text_lines[1:]) + '\n'

def show_help(parser):
	print("Use: ./Cryptography.py {AES|RSA} {encrypt|decrypt} <arguments>")
	parser.print_help()
	print(f"\n{args}")

# Cifrado Simétrico AES
def aes_encrypt(message):
	key = os.urandom(32) # 256 bits (32 bytes)
	iv = os.urandom(16) # 128 bits (16 bytes)
	cipher = AES.new(key, AES.MODE_CBC, iv)
	plaintext = message.encode()

	# Ensure that the message is a multiple of 16 bytes in length
	while len(plaintext) % 16 != 0:
		plaintext += b' '

	ciphertext = cipher.encrypt(plaintext)
	print(f'Key: {key.hex()}')
	print(f'IV: {iv.hex()}')
	print(f'Ciphertext: {ciphertext.hex()}')

# Descifrado Simétrico AES
def aes_decrypt(key_hex, iv_hex, ciphertext_hex):
	key = bytes.fromhex(key_hex)
	iv = bytes.fromhex(iv_hex)
	ciphertext = bytes.fromhex(ciphertext_hex)

	decipher = AES.new(key, AES.MODE_CBC, iv)
	decrypted_plaintext = decipher.decrypt(ciphertext).rstrip()
	print(f'Decrypted Plaintext: {decrypted_plaintext.decode()}')

# Cifrado Asimétrico RSA
def rsa_encrypt(message):
	key = RSA.generate(2048)
	public_key = key.publickey()
	cipher_rsa = PKCS1_OAEP.new(public_key)
	ciphertext = cipher_rsa.encrypt(message.encode())
	print(f'Public Key: {public_key.export_key().decode()}')
	print(f'Private Key: {key.export_key().decode()}')
	print(f'Ciphertext: {ciphertext.hex()}')

# Descifrado Asimétrico RSA
def rsa_decrypt(private_key_pem, ciphertext_hex):
	private_key = RSA.import_key(private_key_pem)
	cipher_rsa = PKCS1_OAEP.new(private_key)
	ciphertext = bytes.fromhex(ciphertext_hex)
	decrypted_message = cipher_rsa.decrypt(ciphertext)
	print(f'Decrypted Message: {decrypted_message.decode()}')

if __name__ == "__main__":
	# Create the main parser object
	parser = argparse.ArgumentParser(description=f'Encryption and Decryption', formatter_class=CustomHelpFormatter)

	# Create the first level of subparsers
	subparsers = parser.add_subparsers(dest='command')
	#-------------------------------------------------
	# Subparser para la AES
	parser_aes = subparsers.add_parser('AES', help='Symmetric Encryption')
	subparsers_aes = parser_aes.add_subparsers(dest='subcommand0')

	# Subcomandos para la AES
	# Sub-parser for encryption
	subcommand_aes_option1 = subparsers_aes.add_parser('encrypt', help='Encrypt a message')
	subcommand_aes_option1.add_argument('message', type=str, help='Message to encrypt')
	# Sub-parser for decryption
	subcommand_aes_option2 = subparsers_aes.add_parser('decrypt', help='Decrypt a message')
	subcommand_aes_option2.add_argument('key', type=str, help='Key in hexadecimal')
	subcommand_aes_option2.add_argument('iv', type=str, help='IV in hexadecimal')
	subcommand_aes_option2.add_argument('ciphertext', type=str, help='Message encrypted in hexadecimal')
	#-------------------------------------------------
	# Subparser para la RSA
	parser_rsa = subparsers.add_parser('RSA', help='Asymmetric Encryption')
	subparsers_rsa = parser_rsa.add_subparsers(dest='subcommand1')

	# Subcomandos para la RSA
	# Sub-parser for encryption
	subcommand_rsa_option1 = subparsers_rsa.add_parser('encrypt', help='Encrypt a message')
	subcommand_rsa_option1.add_argument('message', type=str, help='Message to encrypt')
	# Sub-parser for decryption
	subcommand_rsa_option2 = subparsers_rsa.add_parser('decrypt', help='Decrypt a message')
	subcommand_rsa_option2.add_argument('key', type=str, help='Private key in PEM format')
	subcommand_rsa_option2.add_argument('ciphertext', type=str, help='Message encrypted in hexadecimal')

	args = parser.parse_args()

	if args.command == 'AES':
		if args.subcommand0 == 'encrypt':
			# Código para AES encryption
			#print(f"Ejecutando AES encrypt con mensaje: {args.message}")
			aes_encrypt(args.message)
		elif args.subcommand0 == 'decrypt':
			# Código para AES decryption
			#print(f"Ejecutando AES decrypt con clave: {args.key}, IV: {args.iv}, ciphertext: {args.ciphertext}")
			aes_decrypt(args.key, args.iv, args.ciphertext)
		else:
			show_help(parser)
			sys.exit(1)
	elif args.command == 'RSA':
		if args.subcommand1 == 'encrypt':
			# Código para RSA encryption
			#print(f"Ejecutando RSA encrypt con mensaje: {args.message}")
			rsa_encrypt(args.message)
		elif args.subcommand1 == 'decrypt':
			# Código para RSA decryption
			#print(f"Ejecutando RSA decrypt con clave: {args.key}")
			rsa_decrypt(args.key, args.ciphertext)
		else:
			show_help(parser)
			sys.exit(1)
	else:
		show_help(parser)
		sys.exit(1)
