#!/usr/bin/env python
import sys
import os
import argparse
from Crypto.Cipher import AES

def message_encrypted(message):
	key = os.urandom(32) # 256 bits (32 bytes)
	iv = os.urandom(16) # 128 bits (16 bytes)
	cipher = AES.new(key, AES.MODE_CBC, iv)
	plaintext = message.encode()

	# Ensure that the message is a multiple of 16 bytes in length
	while len(plaintext) % 16 != 0:
		plaintext += b' '

	ciphertext = cipher.encrypt(plaintext)
	print(f'Key: {key.hex()}')
	print(f'IV: {iv.hex()}')
	print(f'Ciphertext: {ciphertext.hex()}')

def message_decoded(key_hex, iv_hex, ciphertext_hex):
	key = bytes.fromhex(key_hex)
	iv = bytes.fromhex(iv_hex)
	ciphertext = bytes.fromhex(ciphertext_hex)

	decipher = AES.new(key, AES.MODE_CBC, iv)
	decrypted_plaintext = decipher.decrypt(ciphertext).rstrip()
	print(f'Decrypted Plaintext: {decrypted_plaintext.decode()}')

if __name__ == "__main__":
	parser = argparse.ArgumentParser(description='AES Encryption and Decryption')
	subparsers = parser.add_subparsers(dest='command')

	# Sub-parser for encryption
	parser_encrypt = subparsers.add_parser('encrypt', help='Encrypt a message')
	parser_encrypt.add_argument('message', type=str, help='Message to encrypt')

	# Sub-parser for decryption
	parser_decrypt = subparsers.add_parser('decrypt', help='Decrypt a message')
	parser_decrypt.add_argument('key', type=str, help='Key in hexadecimal')
	parser_decrypt.add_argument('iv', type=str, help='IV in hexadecimal')
	parser_decrypt.add_argument('ciphertext', type=str, help='Message encrypted in hexadecimal')

	args = parser.parse_args()

	if len(sys.argv) == 0:
		print("Use: python AES.py {(--encryption||-e} <message>) || {(--decoded||-d)}")
		sys.exit(1)

	if args.command == "encrypt":
		message_encrypted(args.message)
	elif args.command == 'decrypt':
		message_decoded(args.key, args.iv, args.ciphertext)
	else:
		parser.print_help()
