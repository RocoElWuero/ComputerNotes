#!/usr/bin/env bash

# Variables de colores y formato
RED="\e[31m"
GREEN="\e[32m"
WHITE="\e[37m"
RESET="\e[0m"

# Función para mostrar opción inválida
print_invalid_option() {
	echo -e "${RED}Opción inválida. Por favor, ingrese una opción válida.${GREEN}"
}
# Función para realizar el escaneo ARP
run_arp_scan() {
	options="${1}"
	target="${2}"
	output_file="${3}"
	
	echo -e "${GREEN}Running arp-scan on ${WHITE}\"${target}\"${RED}...${GREEN}"
	echo -e "${GREEN}======================================"
	echo arp-scan "${options}" "${target}" 2>&1 | tee "${output_file}"
	echo -e "${GREEN}======================================"
}
# Función para seleccionar la interface de red
select_network_interface() {
	while true; do
		echo -e "${GREEN}Seleccione la interface de red:"
		# Obtener interfaces de red (excluyendo loopback)
		interfaces=$(ip -o link show | awk -F': ' '!/lo/{print $2}')
		# Imprimir letras en mayúscula para cada interfaz
		index=65
		for interface in ${interfaces}; do
			letter=$(printf "\\$(printf '%03o' $((1 + index)))")
			echo "${letter}) ${interface}"
			((index++))
		done
		echo -n "Input> "; read -r option
		option="$(echo "${option}" | tr '[:lower:]' '[:upper:]')"
		# Verificar si la opción es una letra válida
		if [[ ${option} =~ ^[A-Z]$ && $((36#$(printf '%d' "'${option}") - 65)) -lt ${index} ]]; then
			break  # Salir del bucle si la opción es válida
		else
			print_invalid_option
		fi
	done

: << BLOCKED
	#C) Filtrar una MAC especifica (ej. 00:11:22:33:44:55)
	elif [ "$ {option}" = "C" ]; then
		while true; do
			echo -en "$ {GREEN}Ingrese la MAC a escanear (ej. 00:11:22:33:44:55): "
			read -r mac
			if [[ $ {mac} =~ ^([0-9|A-F]\:){5}[0-9|A-F]$ ]]; then break
			else print_invalid_option; fi
		done
		run_arp_scan  "" "$ {mac}" "arp_scan-custom.log"
	fi
BLOCKED
	run_arp_scan "${options}" "${network}" "arp_scan-custom.log"

}
# Función para seleccionar el tipo de escaneo ARP
select_arp_scan_type() {
	while true; do
		echo -en "${GREEN}Seleccione el tipo de escaneo ARP:\nA) Escaneo de red local (--localnet)\nB) Escaneo a una red especifica (ej. 192.168.0.0/24)\nInput> "
		read -r option
		option="$(echo "${option}" | tr '[:lower:]' '[:upper:]')"
		if [[ ${option} =~ ^(A|B)$ ]]; then break
		else print_invalid_option; fi
	done
	if [ "${option}" = "A" ]; then
		select_network_interface "--localnet" "arp_scan-localnet.log"
	elif [ "${option}" = "B" ]; then
		while true; do
			echo -en "${GREEN}Ingrese la red a escanear (ej. 192.168.0.0/24): "
			read -r network
			if [[ ${network} =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}\/[0-9]{1,2}$ ]]; then break
			else print_invalid_option; fi
		done
		select_network_interface "${network}" "arp_scan-custom.log"
	fi
}
# Función para comprimir los registros y luego borrarlos
# <=============================================================================
clear_temporary_logs() { #Lo ideal es que preguntara que IP desea guardar
	#Para hacer lo mismo con el de Arp-scan
	mkdir -p .bkp/
	for file in *.log; do
		zip -r ".bkp/${file%.log}.zip" "${file}"
		echo -e "${GREEN}Archivo ${WHITE}\"${file}\"${RED} comprimido."
	done
	rm -f *.log
}
# Función principal
main() {
	while true; do
		select_arp_scan_type
		while true; do
			echo -en "${GREEN}¿Quieres continuar? (Y/n): "; read -r option
			option="$(echo "${option}" | tr '[:lower:]' '[:upper:]')"
			if [[ ${option} =~ ^(Y|N)$ ]]; then
				break
			else
				print_invalid_option
			fi
		done
		if [ "${option}" = "N" ]; then
			break
		fi
	done
	echo -e "${GREEN}===== ${WHITE}Escaneos completados ${RED}====="
	while true; do
		echo -en "${GREEN}¿Quieres limpiar y respaldar los registros? (Y/n): "; read -r option
		option="$(echo "${option}" | tr '[:lower:]' '[:upper:]')"
		if [ "${option}" = "Y" ]; then
			clear_temporary_logs
			break
		elif [ "${option}" = "N" ]; then
			break
		else
			print_invalid_option
		fi
	done
}

echo -e "${GREEN}===== ${WHITE}Escaneo ARP Script ${RED}====="
# Ejecutar el script
main
echo -e "${RESET}"
